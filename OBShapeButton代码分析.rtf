{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 Consolas;
\f3\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red180\green69\blue0;
\red71\green106\blue151;\red41\green66\blue119;\red195\green116\blue28;}
\paperw11900\paperh16840\margl1440\margr1440\vieww27980\viewh13040\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \'d2\'aa\'d4\'da\'c6\'c1\'c4\'bb\'c9\'cf\'cf\'d4\'ca\'be\'d1\'d5\'c9\'ab\'a3\'ac\'cd\'a8\'b3\'a3\'d0\'e8\'d2\'aa\'ca\'b9\'d3\'c3
\f1 RGB
\f0 \'c8\'a5\'b1\'ed\'ca\'be\'a1\'a3
\f1 R
\f0 \'b1\'ed\'ca\'be\'ba\'ec\'a1\'a2
\f1 G
\f0 \'b1\'ed\'ca\'be\'c2\'cc\'a1\'a2
\f1 B
\f0 \'b1\'ed\'ca\'be\'c0\'b6\'a1\'a3
\f1 CMYK
\f0 \'d2\'b2\'ca\'c7\'d3\'c3\'d3\'da\'b1\'ed\'ca\'be\'d1\'d5\'c9\'ab\'b5\'c4\'b7\'bd\'b7\'a8\'a3\'ac\'b5\'ab\'ca\'c7\'d3\'c9\'d3\'da
\f1 CMYK
\f0 \'ca\'c7\'d3\'c3\'d3\'da\'d3\'a1\'cb\'a2\'a3\'ac\'d2\'f2
\f1  
\f0 \'b4\'cb
\f1 RGB
\f0 \'b7\'b6\'b3\'eb\'c4\'da\'b5\'c4\'d1\'d5\'c9\'ab\'d3\'d0\'d2\'bb\'d0\'a9\'ca\'c7\'ce\'de\'b7\'a8\'d3\'c3
\f1 CMYK
\f0 \'b1\'ed\'ca\'be\'b5\'c4\'a3\'a8\'b1\'c8\'c8\'e7\'b1\'c8\'bd\'cf\'c1\'c1\'b5\'c4\'d3\'a9\'b9\'e2\'c9\'ab\'a3\'a9\'a1\'a3\'cb\'fc\'c3\'c7\'d6\'ae\'bc\'e4\'b5\'c4\'b2\'ee\'b1\'f0\'d6\'f7\'d2\'aa\'ca\'c7
\f1 RGB
\f0 \'b1\'ed\'ca\'be\'b5\'c4\'ca\'c7\'b7\'a2\'b9\'e2\'ce\'ef\'cc\'e5\'b5\'c4\'d1\'d5\'c9\'ab\'a3\'a8\'c6\'c1\'c4\'bb\'b1\'be\'c9\'ed\'ca\'c7\'b7\'a2\'b9\'e2\'d6\'b1\'c9\'e4\'b5\'bd\'d1\'db
\f1  
\f0 \'be\'a6\'b5\'c4\'a3\'a9\'a3\'ac\'b6\'f8
\f1 CMYK
\f0 \'b1\'ed\'ca\'be\'b5\'c4\'ca\'c7\'b7\'b4\'c9\'e4\'b9\'e2\'a3\'a8\'b1\'c8\'c8\'e7\'d6\'bd\'c9\'cf\'b5\'c4\'cd\'bc\'a3\'ac\'ca\'c7\'b1\'f0\'b5\'c4\'ce\'ef\'cc\'e5\'b1\'c8\'c8\'e7\'cc\'ab\'d1\'f4\'bb\'f2\'d5\'df\'b5\'c6\'b7\'a2\'b9\'e2\'a3\'ac\'cd\'a8\'b9\'fd\'cb\'fc\'b7\'b4\'c9\'e4\'b5\'bd\'ce\'d2\'c3\'c7\'d1\'db\'be\'a6\'c0\'ef\'a3\'ac\'ce\'d2\'c3\'c7\'b2\'c5\'bf\'b4\'b5\'bd\'d1\'d5\'c9\'ab\'a3\'a9\'a1\'a3\'c8\'e7\'b9\'fb\'c4\'e3\'c1\'cb\'bd\'e2\'d2\'bb\'b5\'e3
\f1 web
\f0 \'c9\'cf\'c8\'a1\'d1\'d5\'c9\'ab\'b5\'c4\'b7\'bd\'b7\'a8\'a3\'ac\'c4\'e3\'d3\'a6\'b8\'c3\'d6\'aa\'b5\'c0
\f1 web
\f0 \'d6\'d0\'d1\'d5\'c9\'ab\'b5\'c4\'ca\'fd\'d6\'b5\'ca\'c7\'d5\'e2\'d1\'f9\'b1\'ed\'ca\'be\'b5\'c4\'a3\'ba
\f1  \
#FFCC00 
\f0 \'b1\'ed\'ca\'be\'d2\'bb\'d6\'d6\'c1\'c1\'bb\'c6\'c9\'ab\'a3\'ac\'c7\'b0\'c1\'bd\'ce\'bb
\f1 FF
\f0 \'ca\'c7\'ba\'ec\'c9\'ab\'b7\'d6\'c1\'bf\'a3\'ac
\f1 CC
\f0 \'ca\'c7\'c2\'cc\'c9\'ab\'b7\'d6\'c1\'bf\'a3\'ac
\f1 00
\f0 \'ca\'c7\'c0\'b6\'c9\'ab\'b7\'d6\'c1\'bf\'a1\'a3
\f1 00
\f0 \'b1\'ed\'ca\'be\'ba\'da\'a3\'ac\'d2\'b2\'be\'cd\'ca\'c7\'c3\'bb\'d3\'d0\'d5\'e2\'b8\'f6\'d1\'d5\'c9\'ab\'a3\'ac
\f1 FF
\f0 \'b1\'ed\'ca\'be\'d5\'e2\'b8\'f6\'d1\'d5\'c9\'ab\'b5\'c4\'d7\'ee\'b4\'f3\'d6\'b5\'a1\'a3\'d5\'e2\'b8\'f6\'ca\'fd\'d7\'d6\'d4\'bd\'d0\'a1\'d4\'bd\'b0\'b5\'a3\'a8\'c6\'c1\'c4\'bb\'b2\'bb\'b7\'a2\'b9\'e2\'a3\'a9\'a3\'ac\'d4\'bd\'b4\'f3\'d4\'bd\'c1\'c1\'a3\'a8\'b9\'e2\'d4\'bd\'c7\'bf\'a3\'a9\'a1\'a3
\f1  
\f0 \'c8\'e7\'b9\'fb\'bd\'f6\'bd\'f6\'b1\'ed\'ca\'be
\f1 RGB, 
\f0 \'c8\'fd\'b8\'f6\'d7\'d6\'bd\'da\'be\'cd\'bf\'c9\'d2\'d4\'c1\'cb\'a1\'a3
\f1 R,G,B
\f0 \'b8\'f7\'d5\'bc\'d2\'bb\'b8\'f6\'d7\'d6\'bd\'da\'a1\'a3\'cd\'a8\'b9\'fd
\f1 Core Library
\f0 \'b5\'c4\'ce\'c4\'b5\'b5\'a3\'ac\'b4\'b4\'bd\'a8\'d1\'d5\'c9\'ab\'d3\'d0\'d5\'e2\'c3\'b4\'bc\'b8\'b8\'f6\'b7\'bd\'b7\'a8\'a3\'ba
\f1  \
CGColorCreate\
CGColorCreateCopy\
CGColorCreateGenericGray\
CGColorCreateGenericRGB\
CGColorCreateGenericCMYK\
CGColorCreateCopyWithAlpha\
CGColorCreateWithPattern\
\

\f0 \'c0\'b4\'bf\'b4\'d2\'bb\'cf\'c2
\f1 CGColorCreate
\f0 \'a3\'ba
\f1  \
CGColorRef CGColorCreate ( \
    CGColorSpaceRef colorspace,\
    const CGFloat components[] \
);\
\

\f0 \'ce\'d2\'c3\'c7\'cd\'a8\'b9\'fd
\f1 CGColorCreate
\f0 \'be\'cd\'bf\'c9\'d2\'d4\'b4\'b4\'bd\'a8\'d1\'d5\'c9\'ab\'a1\'a3\'bc\'c8\'c8\'bb\'ce\'d2\'c3\'c7\'d2\'aa\'d3\'c3
\f1 RGB
\f0 \'b1\'ed\'ca\'be\'d1\'d5\'c9\'ab\'a3\'ac\'c4\'c7\'c3\'b4
\f1 colorspace
\f0 \'d5\'e2\'b8\'f6\'b2\'ce\'ca\'fd\'ce\'d2\'c3\'c7\'be\'cd\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3
\f1 CGColorSpaceCreateDeviceRGB()
\f0 \'a3\'ac
\f1 components
\f0 \'d5\'e2\'b8\'f6\'b2\'ce\'ca\'fd\cf0 \outl0\strokewidth0 \'ca\'c7\'d2\'bb\'b8\'f6\'ca\'fd\'d7\'e9\'a3\'ac\'b4\'f8\'d3\'d0
\f1 4
\f0 \'b8\'f6\'ca\'fd\'d6\'b5
\f1 :\
\pard\pardeftab720\sl280\partightenfactor0
\cf0 float color[]=\{
\f0 \'ba\'ec\'c9\'ab\'b7\'d6\'c1\'bf
\f1 , 
\f0 \'c2\'cc\'c9\'ab\'b7\'d6\'c1\'bf
\f1 , 
\f0 \'c0\'b6\'c9\'ab\'b7\'d6\'c1\'bf
\f1 , alpha
\f0 \'b7\'d6\'c1\'bf
\f1 \}; 
\f0\fs22 \kerning1\expnd0\expndtw0 \'d5\'e2
\f2 4
\f0 \'b8\'f6\'ca\'fd\'d6\'b5\'b6\'bc\'ca\'c7
\f2 0-1
\f0 \'c7\'f8\'bc\'e4\'a3\'ac
\f2 0
\f0 \'b1\'ed\'ca\'be\'ba\'da\'a3\'a8\'b2\'bb\'b7\'a2\'b9\'e2\'a3\'a9\'a3\'ac\'ca\'fd\'d7\'d6\'d4\'bd\'b4\'f3\'d5\'e2\'d6\'d6\'d1\'d5\'c9\'ab\'b5\'c4\'b9\'e2\'cf\'df\'d4\'bd\'c7\'bf\'a3\'ac
\f2 alpha
\f0 \'b7\'d6\'c1\'bf\'b1\'ed\'ca\'be\'cd\'b8\'c3\'f7\'b6\'c8\'a1\'a3\'b1\'c8\'c8\'e7
\f2 \{1.0, 0, 0,1.0\}
\f0 \'be\'cd\'ca\'c7\'b4\'bf\'ba\'ec\'c9\'ab\'b6\'f8\'c7\'d2\'cd\'ea\'c8\'ab\'b2\'bb\'cd\'b8\'c3\'f7\'a1\'a3
\f2  
\f1\fs26 \CocoaLigature0 \
\pard\tx624\pardeftab624\pardirnatural\partightenfactor0
\cf0 \

\f0\b \'d4\'b4\'b4\'fa\'c2\'eb\'b7\'d6\'ce\'f6\'a3\'ba
\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f3\b\fs28 \cf0 \CocoaLigature1 CGBitmapContextCreate
\f1\b0 \
/* Create a bitmap context
\f0 \'a3\'a8\'ce\'bb\'cd\'bc\'c9\'cf\'cf\'c2\'ce\'c4\'a3\'a9
\f1 . The context draws into a bitmap which is `width'\
   pixels wide and `height' pixels high. The number of components for each\
   pixel is specified by `space', which may also specify a destination color\
   profile. The number of bits for each component of a pixel is specified by\
   `bitsPerComponent'. The number of bytes per pixel is equal to\
   `(bitsPerComponent * number of components + 7)/8'. Each row of the bitmap\
   consists of `bytesPerRow' bytes, which must be at least `width * bytes\
   per pixel' bytes; in addition, `bytesPerRow' must be an integer multiple\
   of the number of bytes per pixel. `data', if non-NULL, points to a block\
   of memory at least `bytesPerRow * height' bytes. If `data' is NULL, the\
   data for context is allocated automatically and freed when the context is\
   deallocated. `bitmapInfo' specifies whether the bitmap should contain an\
   alpha channel and how it's to be generated, along with whether the\
   components are floating-point or integer. */\

\fs26 \CocoaLigature0 \
\pard\tx624\pardeftab624\pardirnatural\partightenfactor0
\cf0     \cf4 NSInteger\cf0  pointX            = \cf5 trunc\cf0 (point.\cf5 x\cf0 );\
    \cf4 NSInteger\cf0  pointY            = \cf5 trunc\cf0 (point.\cf5 y\cf0 );\
    \cf4 CGImageRef\cf0  cgImage          = \cf6 self\cf0 .\cf5 CGImage\cf0 ;\
    \cf4 NSUInteger\cf0  width            = \cf6 self\cf0 .\cf5 size\cf0 .\cf5 width\cf0 ;\
    \cf4 NSUInteger\cf0  height           = \cf6 self\cf0 .\cf5 size\cf0 .\cf5 height\cf0 ;\
    \cf4 CGColorSpaceRef\cf0  colorSpace  = \cf5 CGColorSpaceCreateDeviceRGB\cf0 ();\
    \cf6 int\cf0  bytesPerPixel           = \cf6 4\cf0 ;\
    \cf6 int\cf0  bytesPerRow             = bytesPerPixel * \cf6 1\cf0 ;\
    \cf4 NSUInteger\cf0  bitsPerComponent = \cf6 8\cf0 ;\
    \cf6 unsigned\cf0  \cf6 char\cf0  pixelData[\cf6 4\cf0 ]  = \{ \cf6 0\cf0 , \cf6 0\cf0 , \cf6 0\cf0 , \cf6 0\cf0  \};\
    \cf4 CGContextRef\cf0  context = \cf5 CGBitmapContextCreate\cf0 (pixelData,\
                                                 \cf6 1\cf0 ,\
                                                 \cf6 1\cf0 ,\
                                                 bitsPerComponent, \
                                                 bytesPerRow, \
                                                 colorSpace,\
                                                 \cf5 kCGImageAlphaPremultipliedLast\cf0  | \cf5 kCGBitmapByteOrder32Big\cf0 );\
\pard\tx624\pardeftab624\pardirnatural\partightenfactor0
\cf7 // 
\f0 \'b4\'b4\'bd\'a8\'ce\'bb\'cd\'bc\'c9\'cf\'cf\'c2\'ce\'c4
\f1 \cf0 \
\pard\tx624\pardeftab624\pardirnatural\partightenfactor0
\cf4 CGContextRef\cf0  CGBitmapContextCreate(\cf6 void\cf0  *data,\
                                   \cf4 size_t\cf0  width,            \cf7 // width pixels wide  
\f0 \'bf\'ed\'b6\'c8
\f1 \cf0 \
                                   \cf4 size_t\cf0  height,           \cf7 // height pixels high 
\f0 \'b8\'df\'b6\'c8
\f1 \cf0 \
                                   \cf4 size_t\cf0  bitsPerComponent, \cf7 // The number of bits for each component of a pixel
\f0 \'a3\'ac\'d5\'e2\'c0\'ef\'bf\'c9\'d6\'b8\'b6\'a8\'ce\'aa
\f1 8, R,G,B,A
\f0 \'b8\'f7\'d5\'bc
\f1 8
\f0 \'b8\'f6
\f1 bit.\cf0 \
                                   \cf4 size_t\cf0  bytesPerRow,      \cf7 // Each row of the bitmap consists of `bytesPerRow' bytes 
\f0 \'d2\'bb\'d0\'d0\'cf\'f1\'cb\'d8\'cb\'f9\'d5\'bc\'d7\'d6\'bd\'da
\f1 \cf0 \
                                   \cf4 CGColorSpaceRef\cf0  space,   \cf7 // 
\f0 \'c9\'ab\'d3\'f2\'a3\'ac\'d1\'d5\'c9\'ab\'bf\'d5\'bc\'e4
\f1  The number of components for each pixel is specified by `space' \'97> CGColorSpaceCreateDeviceRGB();\cf0 \
                                   \cf4 uint32_t\cf0  bitmapInfo      \cf7 // alpha
\f0 \'cd\'a8\'b5\'c0\'cf\'e0\'b9\'d8
\f1 \cf0 \
                                   );\
\
\cf4 CGContextRef\cf0  CGBitmapContextCreate(\cf6 void\cf0  *data, 				\cf7 // unsigned char pixelData[4] = \{0,0,0,0\}\cf0 \
                                   \cf4 size_t\cf0  width, 			\cf7 // 1\cf0 \
                                   \cf4 size_t\cf0  height,           \cf7 // 1\cf0 \
                                   \cf4 size_t\cf0  bitsPerComponent, \cf7 // 8 components[]
\f0 \'d6\'d0\'c3\'bf\'b8\'f6\'b6\'d4\'cf\'f3\'d5\'bc
\f1 8
\f0 \'b8\'f6
\f1 bit\cf0 \
                                   \cf4 size_t\cf0  bytesPerRow,      \cf7 // 4 
\f0 \'b9\'b2
\f1 4
\f0 \'d7\'d6\'bd\'da
\f1  bitsPerComponent*4\cf0 \
                                   \cf4 CGColorSpaceRef\cf0  space,   \cf7 // CGColorSpaceCreateDeviceRGB()\cf0 \
                                   \cf4 uint32_t\cf0  bitmapInfo);    \cf7 // kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big\cf0 \
\pard\tx624\pardeftab624\pardirnatural\partightenfactor0
\cf7 // 
\f0 \'c3\'bf\'b8\'f6\'cf\'f1\'cb\'d8\'d5\'bc\'b5\'c4\'d7\'d6\'bd\'da\'ca\'fd\'b5\'c8\'d3\'da
\f1 (bitsPerComponent * numberOfComponents +7) / 8\cf0 \
\cf7 // 
\f0 \'c8\'e7\'b9\'fb
\f1 data
\f0 \'b2\'bb\'ce\'aa\'bf\'d5\'a3\'ac\'d7\'dc\'d7\'d6\'bd\'da\'ca\'fd\'b5\'c8\'d3\'da
\f1 bytesPerRow(
\f0 \'c3\'bf\'d0\'d0
\f1 width
\f0 \'cb\'f9\'d5\'bc\'b5\'c4\'d7\'d6\'bd\'da\'ca\'fd
\f1 )
\f0 \'b3\'cb\'d2\'d4\'b8\'df
\f1 (height)\cf0 \
\cf7 // bitmapInfo
\f0 \'d6\'b8\'b6\'a8\'c1\'cb
\f1 bitmap
\f0 \'ca\'c7\'b7\'f1\'b0\'fc\'ba\'ac
\f1 alpha
\f0 \'cd\'a8\'b5\'c0
\f1 (
\f0 \'d3\'d0\'ca\'b1\'b3\'c6\'ba\'ec\'a3\'fc\'c2\'cc\'a3\'fc\'c0\'b6\'a3\'fc\'cd\'b8\'c3\'f7\'b6\'c8\'ce\'aa\'ba\'ec\'c9\'ab\'cd\'a8\'b5\'c0\'a3\'ac\'c2\'cc\'c9\'ab\'cd\'a8\'b5\'c0\'a3\'ac
\f1 alpha
\f0 \'cd\'a8\'b5\'c0
\f1 )
\f0 \'a3\'ac\'d2\'d4\'bc\'b0\'cb\'fc\'c8\'e7\'ba\'ce\'b1\'bb\'c9\'fa\'b3\'c9}